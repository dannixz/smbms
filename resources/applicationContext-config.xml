<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/aop 
http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
http://www.springframework.org/schema/mvc 
http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/tx 
http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
http://www.springframework.org/schema/context 
http://www.springframework.org/schema/context/spring-context-3.2.xsd">

	<!-- 1、引入database.properties -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:database.properties">
		</property>
	</bean>

	<!-- 2、创建数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${driver}"></property>
		<property name="url" value="${url}"></property>
		<property name="username" value="${username}"></property>
		<property name="password" value="${password}"></property>
	</bean>

	<!--3、创建 SqlSessionFactoryBean对象 -->
	<bean id="SqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 引入数据源 -->
		<property name="dataSource" ref="dataSource"></property>
		<!-- 引入mybaits配置文件 -->
		<property name="configLocation" value="classpath:mybaits-config.xml"></property>
		<!-- 引入mapping映射文件 -->
		<property name="mapperLocations">
			<list>
				<value>classpath:cn/smbms/dao/**/*.xml</value>
			</list>
		</property>
	</bean>

	<!--4、注入映射器 MapperScannerConfig -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="cn.smbms.dao"></property>
	</bean>

	<!-- 5、使用注解简化Service层的配置 -->
	<context:component-scan base-package="cn.smbms.service"></context:component-scan>

	<!-- 6、使用AOP实现日志增强 -->
	<bean id="Logger" class="cn.smbms.logger.UserLogger"/>
	<!-- 1.1 使用config织入 -->
	<aop:config>
		<!--1.2 定义切入点 -->
		<aop:pointcut expression="execution(* cn.smbms.service..*.*(..))"
		id="pointcut" />
		
		<!-- 7.3 织入到业务层 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut"/>
		<!-- 1.3 将定义好增强处理织入到业务层的方法中 -->
		<aop:aspect ref="Logger">
			<aop:before method="before" pointcut-ref="pointcut" />
			<aop:after-returning method="afterReturning"
				pointcut-ref="pointcut" returning="result" />
			<aop:after-throwing method="afterThrowing"
				pointcut-ref="pointcut" throwing="e" />
			<aop:after method="after" pointcut-ref="pointcut" />
		</aop:aspect>
	</aop:config>

	<!-- 7、使用aop实现事务控制 -->
	<bean id="txManage"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<tx:advice id="txAdvice" transaction-manager="txManage">
		<tx:attributes>
			<tx:method name="get*" propagation="SUPPORTS" />
			<tx:method name="sel*" propagation="SUPPORTS" />
			<tx:method name="add*" propagation="REQUIRED" rollback-for="EXCEPTION" />
			<tx:method name="del*" propagation="REQUIRED" rollback-for="EXCEPTION" />
			<tx:method name="upd*" propagation="REQUIRED" rollback-for="EXCEPTION" />
		</tx:attributes>
	</tx:advice>
</beans>


